import numpy as np
import pandas as pd

# #если размерность данных >2, то используют иерархическую индексацию(мультииндекс). В один индекс включается несколько уровней

# index = [
#     ('city1', 2010, 1),
#     ('city1', 2010, 2),

#     ('city1', 2020, 1),
#     ('city1', 2020, 2),

#     ('city2', 2010, 1),
#     ('city2', 2010, 2),

#     ('city2', 2020, 1),
#     ('city2', 2020, 2),

#     ('city3', 2010, 1),
#     ('city3', 2010, 2),

#     ('city3', 2020, 1),
#     ('city3', 2020, 2),
# ]

# population = [
#     101,
#     1010,
#     201, 
#     2010,
#     102, 
#     1020,
#     202, 
#     2020,
#     103, 
#     1030,
#     203,
#     2030,
# ]
# pop = pd.Series(population, index = index)

# print(pop)

# # print(pop[ [i for i in pop.index if i[1] == 2020] ])
# #Multiindex
# index = pd.MultiIndex.from_tuples(index)

# pop = pop.reindex(index)
# print(pop)

# print(pop[:, 2020])

# pop_df = pop.unstack()
# print(pop_df)

# print(pop_df.stack())

# index = pd.MultiIndex.from_tuples(index)
# pop_df = pd.DataFrame(
#     {
#         'total': pop,
#         'something': [
#             10,
#             11,
#             12, 
#             13,
#             14, 
#             15,
#             16, 
#             17,
#             18, 
#             19,
#             20,
#             21,
#         ]
#     }
# )
# print(pop_df)

# print(pop_df['something'])

# # pop_df_1 = pop_df.loc???['city1', 'something']
# # pop_df_1 = pop_df.loc???[['city1', 'city3'], ['total', 'something']]
# # pop_df_1 = pop_df.loc???[['city1', 'city3'], 'something']  
# # print(pop_df_1)

# #как можно создавать мультииндексы 
# ## - список массивов, задающих значение индекса на каждом уровне

# il = pd.MultiIndex.from_arrays(
#     [
#     ['a', 'b', 'c', 'b'],
#     [1, 2, 1, 2]
#     ]
# )

# print(il)
# # - список кортежей, задающих значение индекса на каждом уровне
# il2 = pd.MultiIndex.from_tuples(
#     [
#         ('a', 1),
#         ('a', 2),
#         ('b', 1),
#         ('b', 2)
#     ]
# )
# print(il2)

# #через декартово произведение обычных индексов
# il3 = pd.MultiIndex.from_product(
#     [
#         ['a', 'b'],
#         [1, 2]
#     ]
# )
# print(il3)
# #описание внутреннего представления: levels, codes - 
# il4 = pd.MultiIndex(
#     levels = [
#         ['a', 'b', 'c'],
#         [1, 2]
#     ],
#     codes = [
#         [0, 0, 1, 1, 2, 2], #a a b b c c
#         [0, 1, 0, 1, 0, 1] #  1 2 1 2 1 2
#     ]
# )
# print(il4)
# #уровням можно задавать названия
# data = {
#     ('city1', 2010): 100,
#     ('city1', 2020): 200,
#     ('city2', 2010): 1001,
#     ('city2', 2020): 2001,
# }

# s = pd.Series(data)
# print(s)

# s.index.names = ['city', 'year']
# print(s)

# index = pd.MultiIndex.from_product(
#     [
#         ['city1', 'city2'],
#         [2010, 2020]
#     ],
#     names=['city', 'year']
# )
# print(index)
# columns = pd.MultiIndex.from_product(
#     [
#         ['person1', 'person2', 'person3'],
#         ['job1', 'job2']
#     ],
#     names=['worker', 'job']
# )
# rng = np.random.default_rng(1)

# data = rng.random((4, 6))

# data_df = pd.DataFrame(data, index=index, columns=columns)
# print(data_df)
#индексация и срезы(по мультииндексу)
# data = {
#     ('city1', 2010): 100,
#     ('city1', 2020): 200,
#     ('city2', 2010): 1001,
#     ('city2', 2020): 2001,
# }

# s = pd.Series(data)
# s.index.names = ['city', 'year']

# print(s['city1', 2010])
# print(s['city1'])

# print(s.loc['city1':'city2'])

# print(s[s > 2000])
# print(s['city1', 'city3'])

#перегруппировка мультииндексов

# rng = np.random.default_rng(1)

# index = pd.MultiIndex.from_product(
#     [
#     ['a', 'c', 'b'],
#     [1, 2]
#     ]
# )
# data = pd.Series(rng.random(6), index = index)
# data.index.names = ['char', 'int']
# print(data)

# data = data.sort_index()

# print(data)
# print(data['a':'b'])

# index = [
#     ('city1', 2010, 1),
#     ('city1', 2010, 2),

#     ('city1', 2020, 1),
#     ('city1', 2020, 2),

#     ('city2', 2010, 1),
#     ('city2', 2010, 2),

#     ('city2', 2020, 1),
#     ('city2', 2020, 2),

#     ('city3', 2010, 1),
#     ('city3', 2010, 2),

#     ('city3', 2020, 1),
#     ('city3', 2020, 2),
# ]

# population = [
#     101,
#     1010,
#     201, 
#     2010,
#     102, 
#     1020,
#     202, 
#     2020,
#     103, 
#     1030,
#     203,
#     2030,
# ]

# pop = pd.Series(population, index = index)

# print(pop)

# i = pd.MultiIndex.from_tuples(index)

# pop = pop.reindex(i)

# print(pop)

# print(pop.unstack())
# print(pop.unstack(level = 0))
# print(pop.unstack(level = 1))
# print(pop.unstack(level = 2))

# #numpy конкатенация 
# x = [[1, 2, 3]]
# y = [[4, 5, 6]]
# z = [[7, 8, 9]]

# print(np.concatenate([x, y, z]))
# print(np.concatenate([x, y, z], axis = 1))
# print(np.concatenate([x, y, z], axis = 0))

# #pandas - concat
# ser1 = pd.Series(['a', 'b', 'c'], index =[1, 2, 3])
# ser2 = pd.Series(['d', 'e', 'f'], index =[4, 5, 6])

# print(pd.concat([ser1, ser2]))
# ser1 = pd.Series(['a', 'b', 'c'], index =[1, 2, 3])
# ser2 = pd.Series(['d', 'e', 'f'], index =[1, 2, 6])

# print(pd.concat([ser1, ser2], verify_integrity = False))
# print(pd.concat([ser1, ser2], ignore_index = True))
# print(pd.concat([ser1, ser2], keys=['x', 'y']))


# ser1 = pd.Series(['a', 'b', 'c'], index =[1, 2, 3])
# ser2 = pd.Series(['b', 'c', 'f'], index =[1, 2, 6])
# print(pd.concat([ser1, ser2], join = 'outer'))
# print(pd.concat([ser1, ser2], join = 'inner'))